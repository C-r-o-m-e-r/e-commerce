// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  firstName String?
  lastName  String?
  role      Role       @default(BUYER)
  products  Product[]
  cart      Cart?
  orders    Order[]
  wishlists Wishlist[] // Relation to Wishlist model
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Product {
  id            String         @id @default(cuid())
  title         String
  description   String
  price         Float
  images        String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sellerId      String
  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  cartItems     CartItem[]
  wishlistItems WishlistItem[] // Relation to WishlistItem model
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  @@unique([cartId, productId])
}

// --- START: New Wishlist Models ---
model Wishlist {
  id        String         @id @default(cuid())
  name      String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

// --- END: New Wishlist Models ---

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model Order {
  id        String      @id @default(cuid())
  buyer     User        @relation(fields: [buyerId], references: [id])
  buyerId   String
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  productId String
  title     String
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
}
