// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  firstName String?
  lastName  String?
  role      Role       @default(BUYER)
  status    UserStatus @default(ACTIVE)

  products  Product[]
  cart      Cart?
  orders    Order[]
  wishlists Wishlist[]
  reviews   Review[]
  coupons   Coupon[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  products      Product[]
  parentId      String?
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  subcategories Category[] @relation("CategoryHierarchy")
}

// --- ADDED a status field for product approval ---
enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

model Product {
  id            String        @id @default(cuid())
  title         String
  description   String
  price         Float
  images        String[]
  stock         Int           @default(0)
  status        ProductStatus @default(PENDING) // <-- ADDED THIS LINE
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  sellerId      String
  seller        User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  orderItems    OrderItem[]
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Restrict)
}

// ... (rest of the schema remains the same) ...

model Cart {
  id              String    @id @default(cuid())
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?   @unique
  guestId         String?   @unique
  items           CartItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  appliedCouponId String?
  appliedCoupon   Coupon?   @relation(fields: [appliedCouponId], references: [id], onDelete: SetNull)
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  name      String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDED
}

model Order {
  id              String      @id @default(cuid())
  buyer           User?       @relation(fields: [buyerId], references: [id], onDelete: SetNull)
  buyerId         String?
  items           OrderItem[]
  total           Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  paymentIntentId String?     @unique
  couponId        String?
  coupon          Coupon?     @relation(fields: [couponId], references: [id], onDelete: SetNull)
  discountApplied Float       @default(0)
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  title     String
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  discountType  DiscountType
  discountValue Float
  expiresAt     DateTime?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sellerId      String
  seller        User         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  
  orders        Order[]
  carts         Cart[]
}