// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define an Enum for user roles
enum Role {
  BUYER
  SELLER
  ADMIN
}

// User model
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  firstName String?
  lastName  String?
  role      Role      @default(BUYER)
  products  Product[]
  cart      Cart?
  orders    Order[]   // A user can have many orders
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Product model
model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sellerId    String
  seller      User        @relation(fields: [sellerId], references: [id])
  cartItems   CartItem[]
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// CartItem model
model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  @@unique([cartId, productId])
}

// --- NEW MODELS ADDED BELOW ---

// Define an Enum for Order statuses
enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

// Order model
model Order {
  id        String      @id @default(cuid())
  buyer     User        @relation(fields: [buyerId], references: [id])
  buyerId   String
  items     OrderItem[]
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// OrderItem model
model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  title     String   // Store title at time of purchase
  price     Float    // Store price at time of purchase
  quantity  Int
  createdAt DateTime @default(now())
}