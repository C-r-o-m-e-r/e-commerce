# Query: } catch (err) {
# ContextLines: 1

97 results - 42 files

e-commerce/backend/src/controllers/payments.controller.js:
  108          event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  109:     } catch (err) {
  110          console.error(`Webhook signature verification failed.`, err.message);

e-commerce/frontend/src/pages/AddProductPage.jsx:
   42                  setCategories(flattened);
   43:             } catch (err) {
   44                  console.error("Failed to fetch categories:", err);

  102              navigate('/my-products');
  103:         } catch (err) {
  104              setError(err.message);

e-commerce/frontend/src/pages/AdminCategoriesPage.jsx:
   80              setCategories(data);
   81:         } catch (_err) {
   82              setError('Failed to fetch categories.');

  101              fetchCategories(); // Refresh list
  102:         } catch (_err) {
  103              toast.error(`Error: ${err.message}`);

  111              fetchCategories(); // Refresh list
  112:         } catch (_err) {
  113              toast.error(`Error: ${err.message}`);

  122                  fetchCategories(); // Refresh list
  123:             } catch (_err) {
  124                  toast.error(`Error: ${err.message}`);

e-commerce/frontend/src/pages/AdminCouponsPage.jsx:
  17              setCoupons(data);
  18:         } catch (err) {
  19              setError(err.message);

  35                  toast.success('Coupon deleted successfully.');
  36:             } catch (err) {
  37                  toast.error(`Error deleting coupon: ${err.message}`);

e-commerce/frontend/src/pages/AdminOrderDetailPage.jsx:
  21                  setOrder(data);
  22:             } catch (err) {
  23                  setError(err.message);

  38                  toast.success("Refund processed successfully!");
  39:             } catch (err) {
  40                  toast.error(`Refund failed: ${err.message}`);

e-commerce/frontend/src/pages/AdminOrdersPage.jsx:
  32              setPagination(prev => ({ ...prev, totalPages: data.totalPages, totalOrders: data.totalOrders }));
  33:         } catch (err) {
  34              setError(err.message);

  51              toast.success(`Order #${orderId.substring(0, 8)} status updated to ${newStatus}`);
  52:         } catch (err) {
  53              toast.error("Failed to update order status.");

e-commerce/frontend/src/pages/AdminProductsPage.jsx:
  41              setProducts(data);
  42:         } catch (_err) {
  43              setError(err.message);

  54                  fetchProducts();
  55:             } catch (_err) {
  56                  setError("Failed to load initial data.");

  70              setProducts(products.map(p => p.id === productId ? { ...p, status: updatedProduct.status } : p));
  71:         } catch (_err) {
  72              alert(`Error updating status: ${err.message}`);

  80                  setProducts(products.filter(p => p.id !== productId));
  81:             } catch (_err) {
  82                  alert(`Error deleting product: ${err.message}`);

e-commerce/frontend/src/pages/AdminReviewsPage.jsx:
  32              setPagination(prev => ({ ...prev, totalPages: data.totalPages }));
  33:         } catch (err) {
  34              setError(err.message);

  51                  setReviews(prevReviews => prevReviews.filter(r => r.id !== reviewId));
  52:             } catch (err) {
  53                  toast.error(`Error deleting review: ${err.message}`);

e-commerce/frontend/src/pages/AdminUserDetailsPage.jsx:
  17          setUser(userData);
  18:       } catch (err) {
  19          setError(err.message || 'Failed to fetch user details.');

e-commerce/frontend/src/pages/AdminUsersPage.jsx:
  34        setError(null);
  35:     } catch (err) {
  36        setError(err.message || 'Failed to fetch users.');

  50        setUsers(users.map(user => user.id === userId ? { ...user, role: updatedUser.role } : user));
  51:     } catch (err) {
  52        console.error('Failed to update role:', err);

  62        setUsers(users.map(user => user.id === userId ? { ...user, status: updatedUser.status } : user));
  63:     } catch (err) {
  64        console.error('Failed to update status:', err);

  74          setUsers(users.filter(user => user.id !== userId));
  75:       } catch (err) {
  76          console.error('Failed to delete user:', err);

e-commerce/frontend/src/pages/CartPage.jsx:
  27                  setCart(cartData);
  28:             } catch (err) {
  29                  setError(err.message);

  43              toast.success("Item removed from cart.");
  44:         } catch (err) {
  45              console.error('Failed to remove item:', err);

  60              setCart(updatedCart);
  61:         } catch (err) {
  62              console.error('Failed to update quantity:', err);

  75              toast.success("Coupon applied successfully!");
  76:         } catch (err) {
  77              toast.error(err.message || "Failed to apply coupon.");

e-commerce/frontend/src/pages/DashboardPage.jsx:
  21                  setStats(data);
  22:             } catch (err) {
  23                  setError(err.message);

e-commerce/frontend/src/pages/EditProductPage.jsx:
   57  
   58:             } catch (err) {
   59                  setError(err.message);

  113              navigate('/my-products');
  114:         } catch (err) {
  115              setError(err.message);

e-commerce/frontend/src/pages/LoginPage.jsx:
  35              navigate('/');
  36:         } catch (err) {
  37              setError(err.message || 'Invalid email or password');

e-commerce/frontend/src/pages/MyProductsPage.jsx:
  34                  setProducts(data);
  35:             } catch (err) {
  36                  setError(err.message);

  65              toast.success("Product deleted successfully.");
  66:         } catch (err) {
  67              setError(err.message);

e-commerce/frontend/src/pages/OrderDetailPage.jsx:
  21                  setOrder(data);
  22:             } catch (err) {
  23                  setError(err.message);

e-commerce/frontend/src/pages/OrdersPage.jsx:
  20                  setOrders(data);
  21:             } catch (err) {
  22                  setError(err.message);

e-commerce/frontend/src/pages/ProductDetailPage.jsx:
   78              }
   79:         } catch (err) {
   80              console.error("Failed to fetch wishlists:", err);

  102                  }
  103:             } catch (err) {
  104                  setError(err.message);

  116              toast.success('Product added to cart!');
  117:         } catch (err) {
  118              toast.error(err.message);

  151              toast.success('Product removed from your wishlist.');
  152:         } catch (err) {
  153              toast.error(err.message);

  163              toast.success('Product added to your wishlist!');
  164:         } catch (err) {
  165              toast.error(err.message);

  179              toast.success("Wishlist created!");
  180:         } catch (err) {
  181              toast.error(err.message);

  205              toast.success('Thank you for your review!');
  206:         } catch (err) {
  207              toast.error(err.message);

e-commerce/frontend/src/pages/ProductsPage.jsx:
   79                  setTotalProducts(data.totalProducts);
   80:             } catch (err) {
   81                  setError(err.message);

  108              toast.success('Added to cart!');
  109:         } catch (err) {
  110              toast.error(err.message || "Failed to add to cart.");

e-commerce/frontend/src/pages/ProfilePage.jsx:
  39              setMessage({ type: 'success', text: 'Profile updated successfully!' });
  40:         } catch (err) {
  41              setMessage({ type: 'error', text: err.message });

  54              setPasswordData({ oldPassword: '', newPassword: '' });
  55:         } catch (err) {
  56              setMessage({ type: 'error', text: err.message });

  63              logout();
  64:         } catch (err) {
  65              setMessage({ type: 'error', text: err.message });

e-commerce/frontend/src/pages/RegisterPage.jsx:
  61              setSuccess(true);
  62:         } catch (err) {
  63              setError(err.message);

e-commerce/frontend/src/pages/SellerOrderDetailPage.jsx:
  21                  setOrder(data);
  22:             } catch (err) {
  23                  setError(err.message);

e-commerce/frontend/src/pages/SellerOrdersPage.jsx:
  36  
  37:             } catch (err) {
  38                  console.error('[DEBUG] 3. An error occurred:', err);

  58              toast.success(`Order #${orderId.substring(0, 8)} status updated to ${newStatus}`);
  59:         } catch (err) {
  60              toast.error(err.message);

e-commerce/frontend/src/pages/WishlistDetailPage.jsx:
  26              setWishlist(data);
  27:         } catch (err) {
  28              setError(err.message);

  49              }));
  50:         } catch (err) {
  51              console.error('Failed to remove item:', err);

  59              await addToCart(productId, 1, token);
  60:         } catch (err) {
  61              console.error('Failed to add to cart:', err);

e-commerce/frontend/src/pages/WishlistsPage.jsx:
  26              setWishlists(data);
  27:         } catch (err) {
  28              setError(err.message);

  48              fetchWishlists();
  49:         } catch (err) {
  50              setError(err.message);

  58                  fetchWishlists();
  59:             } catch (err) {
  60                  setError(err.message);

  81              fetchWishlists();
  82:         } catch (err) {
  83              setError(err.message);

e-commerce-OLD/backend/src/controllers/payments.controller.js:
  108          event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  109:     } catch (err) {
  110          console.error(`Webhook signature verification failed.`, err.message);

e-commerce-OLD/frontend/src/pages/AddProductPage.jsx:
  41                  setCategories(flattened);
  42:             } catch (err) {
  43                  console.error("Failed to fetch categories:", err);

  98              navigate('/');
  99:         } catch (err) {
  100              setError(err.message);

e-commerce-OLD/frontend/src/pages/CartPage.jsx:
  27                  setCart(cartData);
  28:             } catch (err) {
  29                  setError(err.message);

  43              toast.success("Item removed from cart.");
  44:         } catch (err) {
  45              console.error('Failed to remove item:', err);

  60              setCart(updatedCart);
  61:         } catch (err) {
  62              console.error('Failed to update quantity:', err);

  75              toast.success("Coupon applied successfully!");
  76:         } catch (err) {
  77              toast.error(err.message || "Failed to apply coupon.");

e-commerce-OLD/frontend/src/pages/DashboardPage.jsx:
  20                  setStats(data);
  21:             } catch (err) {
  22                  setError(err.message);

e-commerce-OLD/frontend/src/pages/EditProductPage.jsx:
   57  
   58:             } catch (err) {
   59                  setError(err.message);

  113              navigate('/my-products');
  114:         } catch (err) {
  115              setError(err.message);

e-commerce-OLD/frontend/src/pages/LoginPage.jsx:
  37              navigate('/');
  38:         } catch (err) {
  39              setError(err.message || 'Invalid email or password');

e-commerce-OLD/frontend/src/pages/MyProductsPage.jsx:
  33                  setProducts(data);
  34:             } catch (err) {
  35                  setError(err.message);

  63              setProducts(products.filter(p => p.id !== productId));
  64:         } catch (err) {
  65              setError(err.message);

e-commerce-OLD/frontend/src/pages/OrderDetailPage.jsx:
  21                  setOrder(data);
  22:             } catch (err) {
  23                  setError(err.message);

e-commerce-OLD/frontend/src/pages/OrdersPage.jsx:
  20                  setOrders(data);
  21:             } catch (err) {
  22                  setError(err.message);

e-commerce-OLD/frontend/src/pages/ProductDetailPage.jsx:
   80              }
   81:         } catch (err) {
   82              console.error("Failed to fetch wishlists:", err);

  107                  }
  108:             } catch (err) {
  109                  setError(err.message);

  126              toast.success('Product added to cart!');
  127:         } catch (err) {
  128              toast.error(err.message);

  160              toast.success('Product removed from your wishlist.');
  161:         } catch (err) {
  162              toast.error(err.message);

  172              toast.success('Product added to your wishlist!');
  173:         } catch (err) {
  174              toast.error(err.message);

  188              toast.success("Wishlist created!");
  189:         } catch (err) {
  190              toast.error(err.message);

  214              toast.success('Thank you for your review!');
  215:         } catch (err) {
  216              toast.error(err.message);

e-commerce-OLD/frontend/src/pages/ProductsPage.jsx:
   79                  setTotalProducts(data.totalProducts);
   80:             } catch (err) {
   81                  setError(err.message);

  108              toast.success('Added to cart!');
  109:         } catch (err) {
  110              toast.error(err.message || "Failed to add to cart.");

e-commerce-OLD/frontend/src/pages/ProfilePage.jsx:
  39              setMessage({ type: 'success', text: 'Profile updated successfully!' });
  40:         } catch (err) {
  41              setMessage({ type: 'error', text: err.message });

  54              setPasswordData({ oldPassword: '', newPassword: '' });
  55:         } catch (err) {
  56              setMessage({ type: 'error', text: err.message });

  63              logout();
  64:         } catch (err) {
  65              setMessage({ type: 'error', text: err.message });

e-commerce-OLD/frontend/src/pages/RegisterPage.jsx:
  61              setSuccess(true);
  62:         } catch (err) {
  63              setError(err.message);

e-commerce-OLD/frontend/src/pages/SellerOrderDetailPage.jsx:
  21                  setOrder(data);
  22:             } catch (err) {
  23                  setError(err.message);

e-commerce-OLD/frontend/src/pages/SellerOrdersPage.jsx:
  36  
  37:             } catch (err) {
  38                  console.error('[DEBUG] 3. An error occurred:', err);

  58              toast.success(`Order #${orderId.substring(0, 8)} status updated to ${newStatus}`);
  59:         } catch (err) {
  60              toast.error(err.message);

e-commerce-OLD/frontend/src/pages/WishlistDetailPage.jsx:
  26              setWishlist(data);
  27:         } catch (err) {
  28              setError(err.message);

  51              }));
  52:         } catch (err) {
  53              console.error('Failed to remove item:', err);

  64              // You can add a more subtle notification here later if you want.
  65:         } catch (err) {
  66              console.error('Failed to add to cart:', err);

e-commerce-OLD/frontend/src/pages/WishlistsPage.jsx:
  28              setWishlists(data);
  29:         } catch (err) {
  30              setError(err.message);

  49              fetchWishlists(); // Refresh the list
  50:         } catch (err) {
  51              setError(err.message);

  59                  fetchWishlists(); // Refresh the list
  60:             } catch (err) {
  61                  setError(err.message);

  83              fetchWishlists(); // Refresh the list with the new name
  84:         } catch (err) {
  85              setError(err.message);
